// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: fiscal-year.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'package.fiscalYear';

export interface FiscalYearRequest {
  id: string;
}

export interface FiscalYearResponse {
  id: string;
  designation: string;
  startDate: string;
  endDate: string;
}

export interface IsDateWithinFiscalYearRequest {
  id: string;
  date: string;
}

export interface IsDateWithinFiscalYearResponse {
  isWithin: boolean;
}

export const PACKAGE_FISCAL_YEAR_PACKAGE_NAME = 'package.fiscalYear';

export interface FiscalYearServiceClient {
  getFiscalYear(request: FiscalYearRequest): Observable<FiscalYearResponse>;

  isDateWithinFiscalYear(
    request: IsDateWithinFiscalYearRequest,
  ): Observable<IsDateWithinFiscalYearResponse>;
}

export interface FiscalYearServiceController {
  getFiscalYear(
    request: FiscalYearRequest,
  ):
    | Promise<FiscalYearResponse>
    | Observable<FiscalYearResponse>
    | FiscalYearResponse;

  isDateWithinFiscalYear(
    request: IsDateWithinFiscalYearRequest,
  ):
    | Promise<IsDateWithinFiscalYearResponse>
    | Observable<IsDateWithinFiscalYearResponse>
    | IsDateWithinFiscalYearResponse;
}

export function FiscalYearServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getFiscalYear', 'isDateWithinFiscalYear'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('FiscalYearService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('FiscalYearService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const FISCAL_YEAR_SERVICE_NAME = 'FiscalYearService';
